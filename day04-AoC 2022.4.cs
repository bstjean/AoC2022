'From Squeak6.0 of 21 October 2022 [latest update: #22114] on 4 December 2022 at 1:41:18 am'!Smalltalk renameClassNamed: #AdventOfCode2022Test as: #AoC2022Test!TestCase subclass: #AoC2022Test	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'AdventOfCode2022'!Object subclass: #Elf	instanceVariableNames: 'foodItems'	classVariableNames: ''	poolDictionaries: ''	category: 'AdventOfCode2022'!Smalltalk renameClassNamed: #Food as: #FoodItem!Object subclass: #FoodItem	instanceVariableNames: 'calories'	classVariableNames: ''	poolDictionaries: ''	category: 'AdventOfCode2022'!Object subclass: #HandShape	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'AdventOfCode2022'!HandShape subclass: #PaperShape	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'AdventOfCode2022'!Object subclass: #RPSRound	instanceVariableNames: 'opponentShape playerShape'	classVariableNames: ''	poolDictionaries: ''	category: 'AdventOfCode2022'!HandShape subclass: #RockShape	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'AdventOfCode2022'!Object subclass: #Rucksack	instanceVariableNames: 'compartments'	classVariableNames: ''	poolDictionaries: ''	category: 'AdventOfCode2022'!Object subclass: #RucksackItem	instanceVariableNames: 'type priority'	classVariableNames: ''	poolDictionaries: ''	category: 'AdventOfCode2022'!HandShape subclass: #ScissorsShape	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'AdventOfCode2022'!Object subclass: #SectionAssignment	instanceVariableNames: 'start end'	classVariableNames: ''	poolDictionaries: ''	category: 'AdventOfCode2022'!!Object methodsFor: '*AdventOfCode2022' stamp: 'BSTJ 12/1/2022 18:17'!split: aSequenceableCollection	"Split the argument using the receiver as a separator."	"optimized version for single delimiters"	"($/ split: '/foo/bar')>>>#('' 'foo' 'bar') asOrderedCollection"	"([:c| c isSeparator] split: 'aa bb cc dd')>>> #('aa' 'bb' 'cc' 'dd') asOrderedCollection"			| result |	result := OrderedCollection new: (aSequenceableCollection size / 2) asInteger.	self split: aSequenceableCollection do: [ :item |		result add: item ].	^ result! !!Object methodsFor: '*AdventOfCode2022' stamp: 'BSTJ 12/1/2022 18:18'!split: aSequenceableCollection do: aBlock	"optimized version for single delimiters:	Example:		$/ split: '/foo/bar' indicesDo: [ :item | ]"	self split: aSequenceableCollection indicesDo: [ :start :end | 		aBlock value: (aSequenceableCollection copyFrom: start to: end) ]! !!Object methodsFor: '*AdventOfCode2022' stamp: 'BSTJ 12/1/2022 18:18'!split: aSequenceableCollection indicesDo: aBlock	"Perform an action specified as aBlock (with a start and end argument) to each of the indices of the receiver element that have been identified by splitting the receiver using the splitter argument. optimized version for single delimiters."		"(String streamContents: [:s | Character space split: 'Pharo is cool'  indicesDo: [ :start :end | s << 's:' << start asString << ' ' << 'e:' << end asString << ' ' ]]) >>> 's:1 e:5 s:7 e:8 s:10 e:13 '"							|  position oldPosition |		position := 1.	oldPosition := position.		position := aSequenceableCollection indexOf: self startingAt: position.	[ position > 0 ] whileTrue: [		aBlock value: oldPosition value: position - 1.		position := position + 1.		oldPosition := position.		position := aSequenceableCollection indexOf: self startingAt: position.	].	aBlock value: oldPosition value: aSequenceableCollection size.! !!AoC2022Test methodsFor: 'reading' stamp: 'BSTJ 12/1/2022 15:23'!readDay01DataFrom: aString	"Asnswer a collection of <Elf> (with their food items)"	| elves groupsOfFoods |	elves := OrderedCollection new.	groupsOfFoods := aString linesGroupedByParagraph.	groupsOfFoods do: [:calStrings |	| elf foods |										elf := Elf new.										foods := calStrings collect: [:each | FoodItem fromString: each] .										elf addAllFood: foods.										elves add: elf ].	^elves 	! !!AoC2022Test methodsFor: 'reading' stamp: 'BSTJ 12/2/2022 11:58'!readDay02DataFrom: aString	"Asnswer a collection of  <RPSRound>"	| rounds |		rounds := OrderedCollection new.	aString lines do: [:eachLine | rounds add: (RPSRound fromString: eachLine)].	^rounds! !!AoC2022Test methodsFor: 'reading' stamp: 'BSTJ 12/2/2022 11:58'!readDay02Part02DataFrom: aString	"Asnswer a collection of  <RPSRound>"	| rounds |		rounds := OrderedCollection new.	aString lines do: [:eachLine | rounds add: (RPSRound fromStrategyString: eachLine)].	^rounds! !!AoC2022Test methodsFor: 'reading' stamp: 'BSTJ 12/3/2022 00:40'!readDay03DataFrom: aString	"Asnswer a collection of  <RucksackItem>"	^aString lines collect: [:eachLine | (Rucksack fromString: eachLine) commonItemsBetweenCompartment: 1 and: 2 ].! !!AoC2022Test methodsFor: 'reading' stamp: 'BSTJ 12/3/2022 01:51'!readDay03Part2DataFrom: aString	"Asnswer a collection of <OrderedCollection> of 3 <RucksackItem>"		| count allGroupsOf3 group allCommons |	count := 1.	allGroupsOf3 := OrderedCollection new.	allCommons := OrderedCollection new.	group := OrderedCollection new.	aString lines do: [:eachLine |	(count = 4) ifTrue: [allGroupsOf3 add: group. group := OrderedCollection new. count := 1].									group add: (Rucksack fromString: eachLine).									count:= count + 1].	allGroupsOf3 add: group.	allGroupsOf3 do: [:grp | 	| r1 r2 r3 c1 c2 c3  |								r1 := (grp at: 1) .								r2 := (grp at: 2) .								r3 := (grp at: 3) .																c1 := (r1 allItems intersection: r2 allItems) asSet.								c2 := (r2 allItems intersection: r3 allItems) asSet.								c3 := (r3 allItems intersection: r1 allItems) asSet.																allCommons add: ((c1 intersection: c2) intersection: c3).								].	^allCommons! !!AoC2022Test methodsFor: 'reading' stamp: 'BSTJ 12/4/2022 00:19'!readDay04DataFrom: aString	"Asnswer a collection of  <>"	^aString lines collect: [:eachLine | 	| pairString assignmentPair |											pairString := eachLine subStrings: #( $, ).											assignmentPair := Array new: 2.											assignmentPair at: 1 put: (SectionAssignment fromString: (pairString at: 1)). 											assignmentPair at: 2 put: (SectionAssignment fromString: (pairString at: 2)).											assignmentPair 								 ].		! !!AoC2022Test methodsFor: 'tests-extensions' stamp: 'BSTJ 12/1/2022 18:31'!testSequenceableCollectionExtensions	" #splitOn: "	self assert: (#(1 2 3 3 4 1 2 3 5 4 6) splitOn: 4) equals: #(#(1 2 3 3) #(1 2 3 5) #(6))asOrderedCollection.	self assert: (#(1 2 3 3 4 1 2 3 3 5 6) splitOn: #(3 3)) equals: #(#(1 2) #(4 1 2) #(5 6)) asOrderedCollection.	self assert: (#(2 2 3 3 4 1 2 3 3 5) splitOn: [:each | each > 3]) equals: #(#(2 2 3 3) #(1 2 3 3) #()) asOrderedCollection.! !!AoC2022Test methodsFor: 'tests-extensions' stamp: 'BSTJ 12/2/2022 11:57'!testStringExtensions	| str1 str2 str3 str4 str5 |		" #linesGroupedByParagraph "	str1 := '1234'.str2 := '123'.str3 := ''.str4 := '1234'.str5 := '1234'.	self assert: str1 linesGroupedByParagraph size equals: 2.	self assert: str2 linesGroupedByParagraph size equals: 2.	self assert: str3 linesGroupedByParagraph size equals: 0.	self assert: str4 linesGroupedByParagraph size equals: 2.	self assert: str5 linesGroupedByParagraph size equals: 4.	! !!AoC2022Test methodsFor: 'tests-AoC' stamp: 'BSTJ 12/1/2022 00:59'!testDay01	self assert: (self solveDay01Part01With: self day01Example01Data) equals: 24000.	self assert: (self solveDay01Part01With: self day01Puzzle01Data) equals: 69501.		self assert: (self solveDay01Part02With: self day01Example01Data) equals: 45000.	self assert: (self solveDay01Part02With: self day01Puzzle01Data) equals: 202346.! !!AoC2022Test methodsFor: 'tests-AoC' stamp: 'BSTJ 12/2/2022 02:05'!testDay02	self assert: (self solveDay02Part01With: self day02Example01Data) equals: 15.	self assert: (self solveDay02Part01With: self day02Puzzle01Data) equals: 10624.	self assert: (self solveDay02Part02With: self day02Example01Data) equals: 12.	self assert: (self solveDay02Part02With: self day02Puzzle01Data) equals: 14060.! !!AoC2022Test methodsFor: 'tests-AoC' stamp: 'BSTJ 12/3/2022 01:54'!testDay03	self assert: (self solveDay03Part01With: self day03Example01Data) equals: 157.	self assert: (self solveDay03Part01With: self day03Puzzle01Data) equals: 8176.		self assert: (self solveDay03Part02With: self day03Example01Data) equals: 70.	self assert: (self solveDay03Part02With: self day03Puzzle01Data) equals: 2689.! !!AoC2022Test methodsFor: 'tests-AoC' stamp: 'BSTJ 12/4/2022 01:04'!testDay04	self assert: (self solveDay04Part01With: self day04Example01Data) equals: 2.	self assert: (self solveDay04Part01With: self day04Puzzle01Data) equals: 644.		self assert: (self solveDay04Part02With: self day04Example01Data) equals: 4.	self assert: (self solveDay04Part02With: self day04Puzzle01Data) equals: 926.	! !!AoC2022Test methodsFor: 'solving' stamp: 'BSTJ 12/1/2022 15:11'!solveDay01Part01With: aString	| elves |		elves := self readDay01DataFrom: aString.	^(elves collect: [:each | each totalFoodCalories ]) max	! !!AoC2022Test methodsFor: 'solving' stamp: 'BSTJ 12/1/2022 15:11'!solveDay01Part02With: aString	| elves top3 |		elves := self readDay01DataFrom: aString.	top3 := (elves asSortedCollection: [:a :b | a totalFoodCalories > b totalFoodCalories ]) first: 3.	^top3 inject: 0 into: [:total :each | total + each totalFoodCalories]	! !!AoC2022Test methodsFor: 'solving' stamp: 'BSTJ 12/2/2022 11:57'!solveDay02Part01With: aString	| allRounds |		allRounds := self readDay02DataFrom: aString.		^allRounds inject: 0 into: [:total :eachRound | total + eachRound score] 	! !!AoC2022Test methodsFor: 'solving' stamp: 'BSTJ 12/2/2022 01:45'!solveDay02Part02With: aString	| allRounds |		allRounds := self readDay02Part02DataFrom: aString.	^allRounds inject: 0 into: [:total :eachRound | total + eachRound score] 	! !!AoC2022Test methodsFor: 'solving' stamp: 'BSTJ 12/3/2022 00:52'!solveDay03Part01With: aString	| items |		items := self readDay03DataFrom: aString.	^items flatten inject: 0 into: [:total :each | total + each priority]		! !!AoC2022Test methodsFor: 'solving' stamp: 'BSTJ 12/3/2022 01:53'!solveDay03Part02With: aString	| items |		items := self readDay03Part2DataFrom: aString.	^(items collect: [:each | each asOrderedCollection first]) inject: 0 into: [:total :each | total + each priority]		! !!AoC2022Test methodsFor: 'solving' stamp: 'BSTJ 12/4/2022 00:30'!solveDay04Part01With: aString	| assignmentsPairs overlaps |			assignmentsPairs := self readDay04DataFrom: aString.	overlaps := assignmentsPairs select: [:pair | | ass1 ass2 |													ass1 := pair first.													ass2 := pair second.																							((ass1 isFullyContainedIn: ass2) or: [ass2 isFullyContainedIn: ass1]) ].	^overlaps size		! !!AoC2022Test methodsFor: 'solving' stamp: 'BSTJ 12/4/2022 00:38'!solveDay04Part02With: aString	| assignmentsPairs overlaps |			assignmentsPairs := self readDay04DataFrom: aString.	overlaps := assignmentsPairs select: [:pair | | ass1 ass2 |													ass1 := pair first.													ass2 := pair second.																							(ass1 numberOfOverlapsWith: ass2) > 0 ].	^overlaps size		! !!AoC2022Test methodsFor: 'input data' stamp: 'BSTJ 12/1/2022 00:06'!day01Example01Data	^'10002000300040005000600070008000900010000'! !!AoC2022Test methodsFor: 'input data' stamp: 'BSTJ 12/1/2022 00:35'!day01Puzzle01Data	^'6110255069155699495450933141593941773544543853913019469169617515454511145834692259005212142671808330597011419717849216687191848564538278650712689180357631251515649178461413532902875118431663473168327066297290016844688307437296105710770275390114298245133811230420944184852108500857793539163339575475134515261809435532375006257343531212516334153937230034544499397051063476523158495685399149163093496519963298333135644052285067555818539011794494157353045702290836731518282133993680199417813453526220242817468334844726529256471371325146942239545732522558308148136143601046361540235111141075141126832107169515546147186110945859017590151222075662394958650795355538220484016005121952295721872614752646686266292661056198941225443113046112718157353550947349782069673345763167955954290162024413634511714765342344032940651659681697186854291722910458160146371385346019554774203764281620427934596101102750385499546832654014469437663548576150424874559018522250594596552813132354421567640594273117981101812068128410417291813586723346114503975472311666732614087461489144213133126681277241165431461271367684103121377402250633069414732742114236957224159407449711046589955252131242230867519382059936375814229937202985536690208522406083846991217564202402913074871194913020105464261634514513556784810837119605919822101591664474244694744844184360233095663145359973063446619054055340554622120515545972516580326038894431639494439465233482196418628502218172168274768735830043210128142063540602544114765178271265710398570181713756521926903439965371072639321843443138516705400688553917668124865232040321090128124354119318116875239398012744202421841743090141748754176122410021236377988380101365749139946701827022783164413014073510255151443011355754105019191258895356113977045596118586497107788479463827178274147602591113537526482584725485054622542626461493941705185195638634014539261178551518260407659346064453731513788099393101167912893628215535483820623104444656031617157837405059247117184530274719322029568878805808937948073353035222420504956191200226858728108122084115234428811172379427535084889464039057002226370932288327061711999640674754638028438385420176314387259970881522236025153834395869268060535843551953075012108623103561115956306114461214083502495651845842213214835056974645049019902110289709447501131486766672114941104453808643493415211632297857385740422952281590437531522841627858952120133071177359067961205463230461269197140748211168629111809110529610138951090327309753254784681458877587746449615215217432522425547601820995440495140443481471814424919519810325857401418443141608134801311739057778124770324411849659762027848834810633158151855817789512899112278207674129217614353718382686503717603175333936981591391756083296599011248124668712173666204330764871816296441855876196032727154426412009109162329158522918311113976901363785211613464612752378360128567283626949805453627464816402949853685215493126384925867396069301333019237327236311088783025286300652781098494111960975743463852628158394446444557114111320132581236623755951089300230759388375661154759287746622003468641034316677119451138293858028579257387982461624552871179810103302710348187091342766938050515431497498768861103508847655674365284765035903371253776888571335861586670532047685445385345651506580816133114944834954485139994945136241853725295050582254180018424694328162085547360040012231492257901948457334134322429348241527290212898334835315600297133385408432137174008250719412752552637392697567914336811398041676041469725026879202542081228444521477149536455502898106536576576605539315395130332974116409732064908399138205987268910264494566823643759703412531604351832198492423622522490460091737678764945298273735934537103140213441256912756548841653073190381827238685796777081192612403968313631106537314731635471915335614141492488655304692350261843557585143992012219026172159286218932469298954492108104825421284370536893695396618792717439425867253234071811874831871178645763311635596881070977910843628620301457332123405372247226883481352020174052361387033801580611949099805162664389280684976721455953798359228332518600304538925771462264522910133620284483220012617928489740635564438644807427732840974660205824351404176549593595541724593727100339332074349251812748269142502233642720235347437633515329765631142242653550106335128815095055643542593766544622755759165856486337314019523995874661018550563745611234962919330710013570911416752148171570599419335170398057719366601099643557284916372431335439371280483278024166511179174886093609718845083961652685129615311457401209444885499602973591952383440513015240052031037531826001438188216672577467146145335466632094139101164673874286629971588147441731393448660913128623038303837617626593036559830455889127054512284564754722536263213542409594831765061134219293111280727564056643016073154468687261015342394314628354542304793236145135144603530395388508131384288293315842471906627728183120493585845267923243153354605187185135154662335550893764172347195292561517948661163686930114403564850791379611334467788762401816839509234045504109328843871134116526410261757035414303348462977394747432827220022667245683046334792248865478320432762449376810756172198661773934396847944506134971430113442618875216235955371276912794674056642729568635132411368926503459240036764652498538501949190028415334128059896006391617155624147612093713137625455123398523901661470360984512321629996252139418951913180131593322111421084739061419200072332702104854666814352836444044201944901737681350157855999087508581236893581568769029531038687545606581629320471900641655694654541544083720256223934639364129111312269761956576364431282895551238445470312165707411707138797866480054492036594145592548464445432322203639085780534525491751785910697104148986137331117807293848025235394025672461713348832447103235875788308013380717866561075311646194838031627142668861633154532746768324140311512717781407411149402639485822285520936113598317096000455225941152279914013226938660307930649057361574236031678084795010634232031864598917178924968108801326411047124123450287802672879451296177354267765178523772434780941403727130861482159123972193715256128432397559111161431220887105302337721650506527134336551458471151811799110153026109151483211702317549947325102298936481868191057753761211936361272119922567780929816719250322213834813441428391057574659923241641142963151639335806848275721372976138051017812095133609737981191584616646348349069955102153124875914942072525464566372791823105043897430516973451029726871711084514773524540200710929117131090911511039259001010011267117851183382245239742102185752223341478392028836788454861523280341052712300197037843548197730773306102025946537530994731670276501375017582493712672293492061165467623191127477617398777525852123315404073569538454041807690154289425999205573260740562369396910802130647321303372405139632606590626141193891285312859393895011818549665295972928098363884495610149573655862755175438648179761377316943739205310962150148942213229299542641196359734994516223656126240437810142163193534292831474942452239455916935657112261962982410528684568823890197527928087145932262909109475298035321233531307918234521840741663705617831857549031846300615138792316118223664076122637536822465020656703373216224283688617137954140885388336759927394374488445084068278011072157327255801487492311675056232320944311370917433607470059836508731049322986799441382564546875113466776340156306229178841256328626272187701065540921395819758493725296704114599749566057572813254856861350207956523366210146206250297137626068221151552315141124982271230757291509310534103816407855644357298961921974560761834548195512279884662266632549348291069818913378153558958254323268315472754567512971246284843898191175161435785360276130592067822150613885101751506677380814470196228168043159344627112856390261660555352824451125673363724221258952488800914577634960439271010356361140112234110061724810936865110252786872953070152012324523038479922552569291386312481324711387667792552370386591086973582431311247436684634343351058830312629600197745241270176861120273779632109101434363055171395041672806557650664874326071385510373220922839647071965360314944544491111792335133328314394503860683449541945973641597731095448529035873195409641346191642033295404'! !!AoC2022Test methodsFor: 'input data' stamp: 'BSTJ 12/2/2022 00:33'!day02Example01Data	^'A YB XC Z'	! !!AoC2022Test methodsFor: 'input data' stamp: 'BSTJ 12/2/2022 00:38'!day02Puzzle01Data	^'B ZA ZB ZC ZC ZB XA XC XA ZC YC XC YC YA XA ZA ZA XB ZB XA ZA XC YA XB ZB ZA XC ZA ZA XB ZA ZA YC YA ZC ZA ZC YC ZC ZA ZA XA XB XA ZB ZA XA ZA ZA XA XC YA ZB XC YA XB YA ZA XA ZA XC ZA ZA YA XC YA XB XA XA ZC YA ZA XC XC ZC ZA ZA XA ZC XC ZB ZA ZC YC ZB XA XA ZA XA XC YA ZC ZB XA XA XA ZA YA XC XA ZB XC YA XA XA XC XB ZB ZA ZA XA ZC ZC XC YB XC ZA ZC XA ZA XA XA XA XA ZB XA XB XC ZA ZA ZA XA XA XB XA ZA XA ZA XB ZA ZA XB ZA ZA ZC YB ZA ZB ZA ZA XC XA XC YC XA XA XC YA ZA XB ZA ZA ZB XB ZA XA ZA XA XA ZA XA ZA ZC XA ZA XC YA ZA ZA XA XA XA XB ZB XA ZA XA ZC YB YC YB XA ZA ZA ZC YA ZA XB ZC XA XC ZC XC YA ZA XA ZC ZA ZA ZA YC ZA XA XB ZA ZC ZA ZA XA ZA ZA ZA ZA ZA ZA ZA ZC XA XA XA XB YB XA XA ZA ZA XA ZA XA XA ZB XA ZC ZA ZC ZA ZA ZC ZA XC ZA XC XA ZA ZB ZA YB ZA XB ZA ZA XA ZA ZA XA ZB ZC XA ZA XB ZC YB ZC XA ZA ZC XB XC ZA ZA XA ZC XA ZC ZC ZB ZB ZA ZC XA XB YA YA ZC XB XA ZA ZB YA ZA ZC ZA ZA XA ZB XC ZB XA ZB ZC YA XA XA ZA ZA ZC YA XA ZA ZA XB ZA ZC XC ZA ZA XB ZA XC YA XA ZA YC ZA YA ZC XC YA ZC YA ZA XC YA ZA XA XB ZA XC XA XC XA XA ZA XA ZA ZA XC XC ZA ZC ZC XA ZC YA XA ZA ZC YA XB XC YB ZC YA XA XC ZA XA ZA XA XC XA XA ZB XC ZA YB YA ZA ZA ZA ZB YA YA ZB ZA ZA XC ZB YC YA XA ZC ZB ZA ZA ZA YC ZA ZA ZC ZC ZC ZA XB YC XA XA ZA ZB ZA YA XA ZB XA XA XA ZA YA ZA XB XA ZC XA ZA XC XB XB YB XA ZA ZA ZA XB XA XB ZA YB ZC ZA XC ZC XA ZC YC YA ZA XA XA XB XA ZA YC YB XA XA XA XC YA ZA YA XC ZA ZA ZA ZC ZA XA ZC ZB XC YA ZB ZB ZC ZC ZA XA ZA ZB XB XA ZA ZA YC ZA ZA XC ZA ZC ZC ZA ZA ZB ZA XB YA ZA XC ZA XB XA ZC YA ZC XC YA XC XC XA ZC ZC YA ZA ZA XA XC ZA YA ZA XB ZA XA ZA ZA XB ZA XA ZC XA ZA ZC XA ZA XA ZA XB ZA ZA ZC YC YC ZC ZC YA XA XA XA ZA ZC YA ZC ZA ZC ZB ZB XA YC YA XA ZA XA XA ZC ZC YC YA YA XA ZA XC ZA XA ZA ZC YA XA ZA ZA XB YA ZA ZA ZA ZC YA ZA XA XA ZA ZC YA ZA ZB ZA ZA XA XA YC ZC ZA ZB ZA ZA ZA XA XC ZA ZA XA XA ZA ZB YA YC YA XA ZC ZC YA ZC YA XA XA XA ZC YC YA ZB XC YA ZA XA ZA YC YC ZB ZA ZC YA XC ZA XC YC ZA ZC YC YA YB XA ZC ZB ZB YA ZC YA XA ZA ZC YA ZC ZA ZA ZA XA ZA ZC ZA XA ZC ZC YA XA XC ZC YA ZC YA ZA XA XA ZA ZA XA ZC YC ZA ZB XC ZA ZA ZA XB XA ZA YA XC ZB XA ZC YC ZC ZC ZA ZA ZA XA ZC ZC YA XA ZA ZA YA XA ZA ZC XB ZA XA ZA XC ZA XC XA XC YC YA XA XA ZB ZA ZA YB ZA XC XA XC XA XC XA ZA XA XA XC YA XA XC XC ZA XB YA XB ZA ZA XC ZA ZA XA ZA XC XC ZA XC ZC YC YA XA XA XC ZC ZA ZC ZA ZB ZA YB ZA XA ZA ZA ZC ZA ZA XA XB ZA ZC YC ZB ZC YC ZA XA XC XB XC ZA ZA ZC ZA XA ZA ZB XB ZA ZA ZB ZA ZA ZB ZB ZC ZA ZC ZA ZA ZC ZA ZA ZB ZA ZA XA XA XA ZC ZA XA ZA XA ZB ZB ZC ZA ZA YC XA XA ZA XA XC XC ZB YA XA XC YC YA XA ZA ZB ZB ZA ZC ZA ZC ZC XA ZA XA YA XA ZC ZA XA ZA ZA ZA XC XB ZA ZA YC XA ZA ZA ZA XA YA XC YA ZC YA ZA ZC XA ZA YC ZA XA XA ZA YA ZA XC ZA ZA ZB ZA ZA ZC XB ZC YA XA YB XA ZC ZC XC ZA XA XA ZA ZA XA ZB ZB ZA ZB YB ZA XA XC ZA ZC YB ZC ZC ZA ZA XB ZA XA XA ZA ZA XB ZA ZC ZA ZA ZB XC ZB ZC YA ZA XA XB XA XB ZC YC YB ZC YC YA XA ZA ZC YB ZA XA ZA XB XA XC YA XA XB ZA XB XA ZC YB ZA XA ZA XA XB XA XA XA XA ZA ZC YA ZB ZC ZC YC ZA XA ZA XC ZC ZC ZC YA XB XB XC XC ZC XC ZB ZA YA XC XB XA XA XA ZA XA ZA XA XA ZA ZC ZA XC YC YC ZA ZA XA ZA XA ZA YA ZA XA XA ZA XA YA YC XA YC YC XA ZC ZC YC ZA ZC XA XC ZA ZC YB ZA ZA ZA ZC YA XA XA ZA ZA ZB ZC ZA XC YA XA ZA XC XC ZA ZC YA YA YA ZA XA ZA YA XC ZA ZA ZA XA XB ZB YB YC XA ZA ZC ZA XA ZC YB XC YA ZA ZA XA ZA XA XC ZA ZA ZA XA XC YA XA XC YA YC XA XC YA YA ZB YA XC ZB XA XC ZA ZB ZA ZA ZC XA ZB ZC XA ZC YA ZC ZA ZC XA XA ZA YB XA XB XA ZA ZC YA ZC ZA ZA ZA ZC XA ZB XA XA ZC ZA ZA XC YA ZC YA ZA ZC ZA XA ZA ZB XA ZA XC ZB YA ZA XC ZA XA ZA ZA ZC ZA ZA ZC XA XA XC XA XA XB ZA ZA XB XA XA ZC YA ZB XC YA XC ZA ZB ZA XA ZA ZC ZA XC ZA XC XA YA XA ZC XA XA XA XA XA ZA XB ZC ZC YB ZB ZB XA ZA XB ZA ZA XC ZA ZC YB ZC YA XC XA XA ZC YA ZA XA YC YC YA ZA ZC YA ZA ZA XC YB YA XA XA XC YB XA ZA YA ZA ZA XC ZA ZA ZC XA ZB ZB XA XC ZA XC YA ZC ZC YC XC YA ZA XA ZA ZA ZB ZA ZC ZA ZC ZB ZC ZC ZA ZA ZB XA ZA XA ZA XA YA ZB ZC XA ZA ZB XA XC XC ZA XA ZA XC YC ZA ZC YA XA ZA ZB ZC YA ZA ZC ZA XC XA ZA ZA YC ZC ZA ZA XB ZA XA XA XA XA ZA ZA XA XC ZC YC YC YA ZC XB ZC YC ZA XA XA ZC ZC ZA YC YB XC YA XA XA YA XA ZA ZA XA ZA ZA ZA XA ZB ZA XA XA XC ZC XA ZC YC ZA XA ZA ZA XA ZA XB ZA ZA ZA ZC YC ZB ZA ZB ZA XA XA XC YA ZA ZA ZC XA XA XA ZA ZA ZA ZB ZA XA ZA XC ZA ZA ZA ZB ZA YA ZC ZB ZC YA ZA XC YA XA XA ZA ZA XB ZB XC ZC ZA YA ZA XA ZA ZA ZA ZA ZB ZA ZB XA ZA ZC ZB ZA ZC XB ZC XB ZA ZA ZA ZA ZA XB ZA XB ZC YA ZA ZC XA XA ZA YA ZC YC XC ZA XA ZC ZA ZA XA ZB ZA XA ZB ZC YA ZC YA ZC YB XC YA ZB ZA XB ZB ZC XA ZC ZA ZC ZA ZC ZB ZC YC ZA ZC YA ZC XB YB YC XC YA ZC ZA ZC XA ZA ZC YA ZA ZC XA YA XA XB ZA ZC ZA ZB ZC YC ZA ZC YB XC ZA XC XC YC YC YA ZA ZB YC YA ZA XA ZA XA ZC XC ZA XC ZB XA XC ZA ZC XA YA ZA XA ZC ZB ZB ZA ZC YA ZC ZC YC ZA ZA ZB XC XC ZA XA ZA YC YA XA ZC YA ZB XA ZA ZA ZA ZC XA XA ZA YA XB YA XA XA XA XB ZA XC YC XA XA ZA XA ZA ZA ZA ZA XA ZC XC ZC ZA XB YA XC YA XC ZA XA ZA ZA ZA ZC XA XC YA ZA ZC YA ZA XA ZA XA ZB YC YB YC YA YA ZC XB XA XA YC ZA XB ZA XA XA YA XA ZA ZC ZC XA ZC YA ZA ZC XA YA ZA XA ZA ZC XA ZA ZA ZC YA XA XA XC ZA ZC YA XA XC YC XC YA YC XA ZA ZA YC XA ZA ZA ZC YC XA ZB ZA ZA XC YA XC YC YA XC YA XC YB ZA ZA XA ZA XA XA ZA XA XC ZA ZB YC XB XB XA ZA YB YA ZA XA XC YC XB ZA ZC YC XC YA YA ZC XA XA XA ZA ZB ZC XA ZB ZA XB YC XA XA YC XA XC YA ZA ZA XA XC ZC ZB ZA XB ZB YA ZA ZC YA ZB YA ZA XC ZC ZA XA XA XA ZA ZC YA XA XA ZA XC XA ZA XB ZB XA XA XA ZB ZA XA ZC YC YB ZC ZA XB XB XA ZA XA ZC YA XA XB YC YA XA XC YA ZA ZC ZA ZB ZA YA ZC YB YA XC XA XC ZA ZA XA ZA ZA XB ZC ZA ZA XC XA XC YB ZB XC ZC XA XA XA ZA XC YB ZA ZC ZA ZA ZA XB XA XA ZA XA XA ZA ZA YA ZC ZB ZA XA XA XA ZB ZA ZA ZC ZC YC YA ZA XA ZC ZA XA XA ZA ZC XB YA XB ZB ZA ZA ZC ZC ZA XA XA ZC ZA ZC ZB XA XA ZA ZC ZA XA ZB YB XA XC YC XC YB XA XC YA ZB YA YA XC YA ZA ZA ZA ZA ZC ZA ZA ZA ZC XB XC ZA XB XA XC YA XC XA XA ZA ZB XA XA ZA XC ZA ZA ZA XC ZA ZC XA ZA ZA ZA ZB ZA XA XC YA ZA ZB ZA XA ZA YA ZC XB ZA ZA XB YA ZA XC XC XA XA ZA XA ZB ZB YA YA ZC YB ZA ZC XC YC ZC XA XA ZA XA XA ZA XA XA XA ZC ZC YA ZA XC XB ZC ZC YC YA ZA XA ZA ZA ZA XA ZA ZA XC ZA XA XA ZC XB YA XC ZA XC XA ZA XA YC ZA XA ZC XB XA ZA ZA XA XA ZC YC ZA XA ZC ZC XA XA ZA XA XB XC ZB ZA ZA XA XB YA ZA XA XA ZA ZA ZA XC YA ZC YA ZA ZA XC ZA ZB XA XC ZA XA YB XC XA XA XA ZA XA XA XC YA YA ZB ZB ZB ZA ZA ZA ZA XB XC YA XA ZC ZB YA XA ZA ZA XA XB ZA XC YA ZA XA XA ZA ZA ZA ZA ZA XA ZA XA XC ZA XC ZA ZC YA XA ZC ZA ZA ZA XA XA ZA XA ZB ZA XA XC XA ZA XA ZC YC YC YC YC ZA ZB XC ZA XA ZC YA XA ZB XA ZC XC ZC XC XA ZA ZB XA ZA ZA ZB ZA ZC ZA XA XA ZA XA ZC ZC ZA ZC ZC XA ZA XB ZA XB YC XA XA YA ZA ZA XA XA ZA XA ZA XA ZA XA YA XC ZA ZA ZA XA XA ZA XC YC ZA ZA YA ZA XA ZC XB XA ZC ZB YA ZA ZC YA XA ZA ZC ZC YA ZB YA XC YA XA XA ZC ZA ZA ZA XC ZA XC YC YA XB XC XA YA XA ZB XA XB ZA ZA XC XA XB XA XA ZA XC YA ZC ZC YA XB XC YC XA XA ZA XA ZA XA XA ZA ZA XA ZA YA XA XA YA ZA ZC ZA XA ZA XA XB XA XB YC YA ZB ZA ZB YA ZC YA ZA XA XA ZC XC ZB XA XA ZA XA ZA ZB XA ZA XC ZB YC YC XA XA ZA XC YA ZC ZA XA XA XA ZA ZA ZB XC XA YB ZA XA ZA ZC XC YA XA ZC YA XA ZA XA ZA XA XB ZA XC XA XA XA XA ZA ZA XA ZC YC ZB ZB XA ZA XC XC YA XB ZB ZA ZB ZC YA XA XA XC YA ZA XA ZA ZA ZA XA ZA XA ZC YA XC XC YC YC XA XC YA ZC YB ZB ZC ZA XB XC XA ZA YA ZB ZA ZB ZA XA XA ZA ZA YA ZA XA YA ZA ZA ZA ZB XA ZA ZA ZA ZC YB YC XA ZB ZB XA XC ZA ZC ZA ZA XA XA XA XA XA ZC YA XC XA YC XC XA XA ZA XC ZA XC YB ZC YC ZB XA ZC YA ZC YA XA XA XA ZA ZA ZA ZC ZC YA XC YB YA XA XA ZC YC ZA XA XA ZA ZA XA XA Z'	! !!AoC2022Test methodsFor: 'input data' stamp: 'BSTJ 12/3/2022 00:38'!day03Example01Data	^'vJrwpWtwJgWrhcsFMMfFFhFpjqHRNqRjqzjGDLGLrsFMfFZSrLrFZsSLPmmdzqPrVvPwwTWBwgwMqvLMZHhHMvwLHjbvcjnnSBnvTQFnttgJtRGJQctTZtZTCrZsJsPPZsGzwwsLwLmpwMDw'	! !!AoC2022Test methodsFor: 'input data' stamp: 'BSTJ 12/3/2022 00:52'!day03Puzzle01Data	^'DsPhSBQQQhqmBDhPDsFwjwsLjlRjlttvjvvtRbrNJMNNbrHrtjHLHjvwtgfNbNzZdrZnMnMPnQShFPDmnqFmQWVCFfQffgQCVZzVVpHsHJBqtpspJFRHqqmwDbmnnGNlNcwNDDNRbnNDlJTpBJBtJGtPTLsBGqTqqsqpMlSdnScRnnmmDjSdNSdCzvggWzrgzjvfvrgVzWgsMljbrjlZlWcWMJrWwTwbmwQbmmLDQQLhwLCdgpzdgpgnfThHfFRwhfRfSptgpSpnCNpVSGNPvPGSddcMWjMrjqBsJcWqMcBWcVlZJcJLQQFWhQJPJpWcwjHvMQvnnlMvzBHdtCtGZrmVRmVGTVTtCfRTCHHNNvdNzmdMvMlNzvwdvwCTGGRftfSGtGTGDLbFchSgSWWWcMQcMFQrvrQbvtczbVbjbMzZzRpqmDDmqqnNzCDCDCSHHfPJssGLPSdHThLhHdRmqNmNssnNmNCNnpjmsnLhLJfTdLJwfgPTdfGccrtjcMrccwvcrrFrjFLLLqDGjbtqLCChpMMhMBvpwMTmffpZZnJHRncHHgnrsrZffTdMdMBfmMvfvRNWWPnZrVHrZPCDDQtzDCPLCqjpFjvBZhDFHZdwcmslcslBLLNldVtTVVCzzfrrMPNLLcnVcPLRnsCrzWzTqdWtGCzJtbJCrMjjDFHZQjZSpvFGFgHhHpJjJqMctnhtDZDQtfTrFFlrrCCHPwHwlPHFPzDhsffQQDsVfWwVJQJBHHHGdFlHldTpCCFFlLHdCRJccMnqvqMgnNjjMjjvLMLcSvcMfFcMFcrqgJLFZdrTDdthPGsGmtGsWwjNwnjjBQzVVQHwRDnmtPGhPPsPnnTGldbWHBjWVzpbRzbmScqgZMFcqfRJjPTBJhTNNjfPhRBdqtlgdbGldwtCPgdbZmrHHmzpvSvvpzvmvDVCGlWVwCWtGtWCddggqfQQpzFrHHQnzHvfTcNshcLRNFJhcRQrPQDrppBQmCmFQmTzqzsLfmsfSTfqzVLftNdJJNJGCwwGdgCwSGNCTVHTfzWsfftsZstnbvrbWbrbppPbrmmPBQrfqrLtJnttqqtQBJDDtBnDzRgldhVVpJlgzpzhpzsgslhVTTNcPZCvZjmPFZjvPHLlWdNLghVhzzlllpVdjcFPbTcZTFcmcjMjjFjbLwbnDBtfqbtBwfwSBnrbGwSZJNJtrNzjjNCzlBBmqmQDBBmDBBjBPGPbGwhLsnvwnVbGPVMZsDsTBBgcZgBBDBfDBfpnnhhvphGVpvRPnJlSFRNNJHZHSdSRhbmDDmwnnVGbhmjNrrWwLNLsWBrwdMrgvcQqdjlBLlfWHzzPSrcHqFHQgzpPcMpQqrtmbbbRhHHVGnZDnVHhVbVZRwtvdPRvSlTQmHHBQBRLFjVSjrsFVnFQnTHmnTVCVVMrWWjVGgbcNVGCCVdlvfdqfvwbSzwqfwZzwvfmPDwJPDFRmRgPdwwwDNwgwPzhSQzVSzVTQdzHZzHhzQMQzQsWtGCWtpcqqpNnQjjzhVTTVQczhjtWBGntsCNlqrWswDRfFrbFrPDbPfdmzmjcbQjjQztFNqsqBcMJqNPFnlTWnClWwQDTVnTrsMsCRBPZRJRJqRJqwTrhwpVVvgvlDpTvVWVDdLfzgbLtbzSQLSzzjzLzRWZdHvRdBRGbbvCjJnbnpqqpSwzpSSbCwPwjlwjlgDzzqSVzqrThpDBtRtCZdQRQLrQQGRqTGqtmTVdGHHVVNNlhPlMqbNqNDbqWLzQSdFnfznfwBcLcnFppBBDDMPMPhDbhlwbWPlbWMjrDQznFnLZFvVvHRgsddGBBHBfBHFdSltmWJvqtNtHqTQDrrVMzVDnWnNZDJcgWzprTCrCMQzGGjjhwFwdffjflLLLSSSzBBlBLsszncCBZSPSMMMpdWTdrmmnfVGVmMfmrmmDghttvwhHRvjJthNJwhVtDHGpddMWdMmrMmfGdppjWTfpqgbJRthQDDRvwtDhQhDFPcVcbPczLzPBScBBFsZsZpTtLCsbspZtTwrCwrwtDmNNdJmmqSJfqmfNGNmHqGdqbnQvjTcjQglFVlllMFMVFqWfNqnNHHHdfSfHqfSJqhFvvgFcFVzphpTrrwZDpqJqfhsBpfSpchpqcrqwCDvvCDQndmpwDtnRQjWHPZWWjZsCmCWRDmQPPzMGHlzMNsPLPlZsllgsNrhNVBqhFVBbBSqFFBFrVRnRsFFdSzmgwvQsqwclbgHGMBHlWWWlfWGGBtGwqDpDwmcpMrrqrQDZrMZGGJLBVJbVGjGtHVfJtWGHBLLPdzdCghnRnRnSShgNnhnddhjVgzLFjjwhhSwFhVZgRhRgHHCCvdZdrqqCTvBCrqvvrncnNbGMcPpvHFrssdBHMcnctcNNbQGWFJctftgVmzShzzwwVwgmwfRpFWmSSFGQlvTbwWTwHjdBgNhRgMftNBhPbhHnZHlTTZcwZlfBNRjCtCfMjsBfCjgfNBRMppGpJqsJQGrrmmJDpGmDDFGGznngnhzccVdgjbbVjVjVbVLwwQJmQMrLTZhJmZLQTJWmmpDBSslPCFPCpvCqvpPBQTlQLrdlJWrLJLmrlrrpsSsBptpCBdjtcjNVcGGsssppsmchwspFLtvHhQJMtFbrRLDqRVLNSMvFSSVWDrLnzrDqzRqRzzfLgRnzrnsssZZZsZBgCwwmBppwBspZcMtPbwvzzVtzfsqGGVpdSjsLdDnNRCDJBnHJDHDnrDTRcnNZpZSsSLqjpdqqqSMqdddTjCFRFRFHgDRnRgMtfFvvwzwvwvzWvPNpFPncvvchPpNjpFhvPhPLmBwMgDRRwRgMDhBmLzBDDtrHSrdTtslWrSWmfzgmMnfBzmnJsrQsJHHlsVqTjjpbbNnQNNpGGsVQCdsmGlnlCmnGmQQhGCJJNvNjpgqhqhvPgpgPqjpcpcWDMSfSbHLHbSDBBzLNvccWRcddvPjNjFSwHfTFdFsmJlnTTmVFctwtTTCScvShFqtwScrcTSCJQGNndGHWJNQHWHZdgJrJgGNjspLlfPlpfsDjBspfllWgdWHQggZHngHNGdsWJlRMpBlPmSFRTcvZvTVZpRRVvFRVpTZRfFhFvvzGVwrwwwdDBMwQrgcDtMtDDwZrLjsNsWqWjNQCNWbjPMcBLPgBtrdMwdrdLSJSsmqlSNljbmlNjsbQVffzGRvzmmVhQpVGzBFFMvcwMwwpFFfpbDMqPVgLVgmLDPRJtSsSzJssQJJWjRZzgLnDgqLPZgzbgdsdtWQWdRGjTRNQNQvGfHCCFpvfGwlCfCpzzWGqWnqnwWCvCrHffHRpBpBBRSJzRFFDhSQFRVPVsZMNTLsMvPsmBJhllFpFBTJFQplsZtsNsZtdZgjbwggjnbvqrQpTvrphmDvvddfcJJHTTncMlMGbRZZPRwjgzzlSSjGlnlSJSBZzBzssWgwzzwNBsgsPBgszmQptqrrGdvdWmqdhhFQDpQFFfMtzSqlDlzfMhPFhPtffNRsCgSgCCGspRpRGSsgsgWTcWLTTVnWmrVdLrcHmNGNCZwCCggpgDRwpCnRJcdWJHTJWdJdjJccrLvlFltFQQvPFDMjqqlPNfjFNNZPDQVJVWpCbQpJlcmdzlmzBtRSTlTTcncsVSbhpLWpWgsWghgsVSmBTRRmGccRtBwDbrGPbrMMrFVVQqlsGrVsMWBNFNMQHFTfzZfDgjgnLGjjztTncCFwwNmdvNcwwNBvHNFwvdjzjDgZzjntGJZzCnhrrSlPVsJslpslPqdVhpjGPdjHhqHgtHJJsFzrzllQswDwFbcmBlgvZTCgvqTCfgHQJtqTnDbBsFzzrrtFrlwzPdSVMWMVVMSnGNLdwqJCjqChmwMLmMmprNgGDNTtdsdWcHdNspGQggnrgLnQpcSZvFftdddDsDTtttTDJNCCwJJZzbbCjwwVPjVstwZCwslBZQDBjfDDBDfSrvHnmMRrTzmMrmhRppbhDfpjfbjbctjDrPFLRLmFvvLvHvTCtqsVVwldGZGPGVSNZDJGfvwgMgfgmLmLcmBqgWgQWrhPnPTnVGsPRqLWpTmQqQtsbnFhhjhSdGJNCjSfQSbGgBjfTCMWFNPFFtDghPrPJqHqJVzZzwJJHLlqQptDhPrctpPDtnLFzZmwJwdwdvHddVJvZqdzHlfGBbsCmMTsWCBCjsGGBbMQgVmLtpWrFTFBLtpcFNbvhNNnTnvnQRlQQvGHjjqsMqwZZJdqGfZjfZGjQDDhvQNzznzRzRwDNbvgzvsZGPgssMqHZpPptmCcpCrPCZCNNLmwzwCGMZQMQsFNWplvpsJBWpFHBpSPbSbDRRbnDqggnbVbVrbRWHJFTlBBcTvWvsPvFpHTcltVgSvqVbnqDdgQzMQMGMmzthCwmpbPQlblbwSlfSPGBpBGPpBFgMMtLFSHMLVVDVdtHLNctFWnhZsrJhTnWrgZdZgHNLcLtthjCsCWRhjzhTjnWnQBbmPQQPLBGfqjwQBFrzdtmRmpFtFwwmjjzNQllPshqHvjNhfWCLLCMJnCDbgfMJhPsPHvqvqVsssQWbLnCZnvprpmZrGdgjMzTGBjWFBCCSSrBCbddJJndbdJfwPPthrrSSSsFSSgNJHbZbbvvWGgjWgTdpfphMggHdQcwftMMgdtzWGfGWnDBnmvnVJVvfmnCqPFTZPSNCTsZZZRLzGmcGVzDLGvLWBWJmTCrTNSScPlplpHrQrQlqrCvhWFvMGWgfHPgLfjfdgGzjmbjSnzRzVVRmzBRtwjVQnNLfdPgfLdfTtNLPHTNNpppfmbSZRzQRBnnzbQJbmjmSbmVhlslZMrclWFrrqWCWsFhchFmpfNshshflNthWfJCBBdmnQbQBZQdnVFVRccgGTqTrHTbWBFjJBCFFJCCQPvTDHqHqPPGVqqhwfNlWlDhMltlhHmLLgWVjJwhwWLgjjhmVHLLLlSzBlBlSvBvBFGvtdStJSSvqTRRrPMsfQTbRRCZRnTMRZZTCcvSccqBqBBlzdFvBqFsGBctsbRNPbRCZMCrQNfPLdhVpLDVgDhNHWVsPJFDsSsVLgHjLHPbjvCnRQhhRQdVQZlZdbHNMlqNNjgjbpbBLChhCCCWTWnnmvmGtztStzScwrcVcFWNRBTNDBglSSgDwCClQQSFFHdLLsFbPFFLtMcpmWccMWHZPcLstbtMWnWphVMvvzJzpWJWmVphjrDDBBTRwRDDDRRCnPDnqgghsnnhhLljLPTmZwvdZdZjmmzRQNNDpNMSZwvsmqstNQFMFRDVDsHSpRpHSMRHfGGGTLhCChBGhBhBFBJTTbltCvClzvzCZtwtwLTtQQQgjNgmjgQRRRQSjQLjRHPpnZHcJsdnnfsdVHHSSqghhmqBSSqSmBfNjVMJJdnMPrMGVrzvCZwZWCzCtCcQnBBCfBvRzDlsSPdbPPCbhGGpDSDlDDhvDJlHmHWPWdbHnCwCHCrJHlmJcMWHQcPmlmJMmMZPfwTTRDfgdDBfRtgQgdfBwzVvFrqGjzWGVrqvjvNFpspvVBgNNddtTgghhRTwgdDwwwBfTbVFrrvsvjWGVsCsqpSHZmMPJlJnCcLcPZZQrrQZFZnRtnFRTrnlFTtRZwpGGwzGszhjzbsGzzhmjjhhmhfSgvpDSJSgPBSDPDNgpggmsMhMmffsMmzfJmzHHMjWNVcCPgSSDCddSdWCpNBclCQQFRQQlnTLFLRZQnLtttgvqWqzvntdlzNzzHrbPrMhHMhhrVrjPmCFGTGGRGTffcJRpQcJJwmjhPLhjnCQPrLPVQrMrSppRSDRwFnJJwwswTDdtzBzqWWzZDldNgtvlsjzPjLphMSrlppSpfbGqgwTqgVTFFcgGTTGcQvfHQZRlSrSlSmMNMBRNNNrZmmMVcFGTFtqjsJLjjtCdjVJqTRHjjtDjZnVJVVjnNdwfCFPZmPgCCgCZGCFFrrFgLSLBMBWsbBBCgfdrFdShbbzdzQRNNNVhDNJwbSRqmSwRwcpmbSSVfhNBTVGGRnNNzRNhZPfQPjZZrffQZszhzTnVGBvntsNzrLjggjQgQgFdPQjLFQZgwLMbWccLSwWHqHfSqpwccBhzNpztzHNrpHSHQrhZjZqdJRRgPqjhjqqPbQwsMTswwVjdZMVRJMvGWCTDCTQvvtlvQQmHVmTTsmzRmRHffmmfMGBzSPMhSWWdDWDSGBVNcnNbtqqJbcbvgvWhShDBDPhjgPhSjBFrrbCnqJcbCJcFFbnqJlppCTfQmfmZQTLVswRLZprWWppSStfRBLfHPdHHDzlldZQrTnQmmVCqvrvJvzJZPHvzHsDsqgMMmrTTCcnQQmCNQNQmgTpwRWRtwtpcBWwjSRSSpttWSzWQwwqVbQzwGSfVwffVwbqhFGFFMgGLGMlNMcnNgcvlMgddZHHsrCdBssDsHmChFLNNnMvmNnnnFncLrpJJdHZJdZHQSRJbSfVhwwjLtFhNwNNvHnjFVvQLQLHhfbGDMPfffpllpttZMPPZZbVmrqszVmgCWWggbPGclPlZbcZCbfJdrTmVTVsqsRJHvQnnhwhBLHvpdBvsvdVvSPhvQFCgrRmhjqqRgWcWWgmftJDGbZHbjRHNrrBjDnMnzGJJwtzVSzzBzTBSTFhZMDbQhMhlMDJrDrPMJRRqGJSvFvSwFSVdvGvwSFqqHjjzcRTnpGVSGGFWHHpssmjctLzpsRRnhlQbPfPrgDbZlsFJMhPhnTMGmBFdnmlrfqfCcwlwCwCvpjHLsLbjjRHsHsjDjVsgDRjzCnfCfzqrqvwgflcvcvvgqznjtpHZnLLQGhTtTWSSShNMddMTDrrjNnrnMWMrlnPwNwftBtGvptGjBHgBgpfCCSfgvfmqRqLFZRVFbtgBSCbGWWHpLZZRmQhVLLFzZdTQPndPNTTnQWCprQrcpqhHhpppchpphdcdpLMRMGsVGGsMsLbZbtbfMRmtbGDzlgTjwPTlSSSCDSlggNmMRtbsstsMfbwtVssMmtTNCNSBNJJTNPJjCTBDzjlJrvvcQrrhphWBqHhHdqrnrrScbcbglMPRSmvclTlzMTdhVHhhjfdsdhrVDzfjrDLJGtpQwpQBBCttJLGqtqGHhPfDdHwjjhrVrhdrdshrWCpZQCGqtqQWtQWplZPcvMmgmvPccbvTtGWqthqGVdzBWwddBZvZHFFHZrHZvZNRRHHZNHrMMTzRMTdTzbgDVMVssTDTwgJnNmrHHNrCGBPPnGGcwvFvZBmppBdSLcvshcLrglbTQqJJHJzJjDQjQtzRVJztDHslgNNVLcgSrsSsWrSslWgrgLTqHHjQnbHTbbmZBBcFMpmBwnZFCqSlCPdCRTLWWTQQLLQSGjggHcvsggHVTVBLnlcpBQhvGhlrtjmjrHHhjsMPFNPdtqMPqqRfCfcgRwVfVzrgqqwZctTztFMFMTCdPmmFbWJsSJHpTDRDTWMCsHHNbshnlJhJjBsjsbnBHbZcqrZZQwqvvZcrwwvRcZnrttgVBtMbttngmHJVpzlzZlppzwcPcsRPmPPQfGcccRQSSZzzvzlflzZHvJppzJzTsQPSCPPWccWWWqsQqRCQFNRMmnbnjjNbgDdBjhBrdbdDbdgSsZDSgdQZgWSgddwLDLLfCDBqvlhBlClqtqjhvBhBRMcsVMcsbVsrPrmJcPHHVvfjjCnvvfCqhlqvqqqqNFMRRpHPgzszGppGWmmZZNJCgCBZCzPvmBCmjWjjqFtFqjFjbVwqwjttppDMpdMfSfSSNtlwqbqwwqdTGDhdnfLMLhfDDpQvZNZgmrmrQJgrLQjrqRqfNNhrVvcTVdpTscpdtGWBlLggWGddTspZZdJJzWtQgQsDbBgDWsgbFrPrRJNMJMPqMNfHjHGdvVbbWsWdvWGDvWZcbFBTBZCzCjwzrhPBJjzFnQPfSHnglfpnMSngnMgJTprJCCwwrwCwpTpCFjSQQHSttRqggmlVsNcvWdRvbWPNWLNLCWLsSJgHFrSHrMgDbzRTcmbzPPgPPdtBctfHfrMMQfGFJrhQnMfGJRdmmzzqZdDqqTLLwjgZgNljwsTCqsDHssmDsDGVGlVcMccGDVFLntWWnnFzFgzzbtbznLBtlfjGZmcfFGVNFGlVZcMNlNPpbLLmpgbRzqpCHwChQqwhlVBPVgflgBVVrVTTwgwBPmgflDQjnnGvqjGDDFjGlGnvqHHJScCLzdCZdbLSbFdFqvDDdGMQGQbchNCLRWSbzCbNRzbWRmsrhQwVVwBhmQpPwpgVGmfHCCPqWqHLWLCfRJpbrrbQphwZbZSTVDQzNnzMzNdstMDzzNtZwFhrlwVJJrJlFFJRFwFRDzSvzstnszMnjQcqggjPqQBcqqBzNwLTqwTjrBrljWpBlrQpBpsCGGCtpssCMttDtHsttMDCHpmnrJVmRhhvJVcHtsGHMCnZCPZMbvSmVbRhbgmmSJflzNLrzqzfWfqBWrqsZLqqFNhfrGnJFvDVjVmWlcjVjdDTDlbbTDTzmrCnMmJGnHnmCHfJGfvnfMlVRdDglTlTgVlVjbWWVzVjvNZqSBsLZNtqRsLBqLqQtLffRRfLVHZHfJHVJcMrMZZwwTzGBBzBTBjGTwrwdSCjqmWbWQbqnbvWhbQPGnGNnpvwSzltpBldtSdzllptCSjTTtvWsbnbWnNvQQQQvsRRLfJRRVGfDcfVPpqrvswPvvvPsNqmDLDttCCcHHZVrCtWhgSddBhghQMdbhbwhgSdQgCCctZcDtLntLttCVLtSLCcdGzdQMFzQMdgGGlGJMzBgBwRqNNfmmTsvfRfJTpwjmpPpcphpdrWDmTgHWMtRWqHRVVHSbGcGGQnvNQGvsjBtVHBLjvqVPVBlzbQCzbZllSzQslpCJpJJDggcggfDTffrTlhrVrfCsDVTsWzGBBZcBRBqRBWtGtZcqQNFmFHrHNSSmSLJdJrNGZLbGjbcBjBGjqcbgjcddQvPnHddnQJHSHSFPdnFfDDTfDMMCrwMlPTwDCsrCNBnrNHQHBscvhfBMbbGtgWWWqZFmnZGZbmVCdMzvvShfzfGcdcfMSSWqbjnmbnjWgmFFgtWVbWZwNTNLjNprNwQLDwrTrHQrlwwlcjlzQRBcBccbdLCVnNVWJJzfLnddpZDMtZpSDMZpMZMsPtHVNJVfRCRddVndnJLSJdmDTZvTqtDDHttRPcqhQlwgGlghbqBhDTspTqssqTbdmCMwVmnmlfCDPLPWjjrSjvPzqZvjvRqjLtPwnnHCmWVcncMnnwmncHcHllRFztFjjqjQFQTbdTbQhTFSVSdhMMVMFjjgbthcbzczcgDvwCJVJWWJDRnfmbDmccfmmgfbQrJvPGWWnpVMqdZsZpqMgRLcHbgnfpgpJjlqqpSFwrTHFBqlZtBPZqHTzDwmSvCvCmsmmvTSwvFwcfRRNRLcQRWNssNNbRWLWLPpMgDMDnsWSnjBQnrjbnLFcVVGChCFdhdVFZVpVCdVbvQbRrbvBBbBjQSJZrrJrRFNwGNCCFHcVTHcFdHHHTDzMzfsgzwpPWMmPflmtt'	! !!AoC2022Test methodsFor: 'input data' stamp: 'BSTJ 12/4/2022 00:20'!day04Example01Data	^'2-4,6-82-3,4-55-7,7-92-8,3-76-6,4-62-6,4-8'	! !!AoC2022Test methodsFor: 'input data' stamp: 'BSTJ 12/4/2022 00:30'!day04Puzzle01Data	^'61-78,61-771-98,23-9870-70,3-707-41,7-405-85,2-5013-59,13-1322-81,57-824-26,27-7037-86,38-863-49,48-4843-52,42-526-95,6-9427-66,26-6515-16,16-8929-61,22-869-82,10-832-40,39-425-67,6-686-57,13-8770-92,69-7137-53,50-592-94,1-9411-81,10-823-83,1-378-90,77-9310-93,10-1114-81,32-806-29,5-4791-99,19-916-87,6-8629-94,93-943-18,17-1844-44,45-9125-25,26-5430-83,30-3050-86,27-878-40,9-4025-78,24-793-12,11-9547-53,47-5227-47,27-4719-67,19-2098-98,1-999-38,8-906-98,7-118-59,50-5337-99,36-991-98,1-9914-14,15-4413-95,4-951-99,2-9843-80,44-7914-87,5-8821-57,38-5641-49,9-5030-67,29-6664-94,83-9318-93,2-1356-61,3-6299-99,42-9021-83,22-7120-86,12-4112-77,81-8961-97,60-6194-95,10-957-98,7-9957-80,3-9915-88,16-5746-64,21-6559-78,59-993-86,24-363-45,2-6365-66,65-6911-63,41-643-76,8-7526-50,49-867-98,8-9844-88,43-8710-25,9-9935-83,34-8314-41,14-4026-35,29-3621-95,22-223-84,2-8381-90,2-8911-50,11-1144-52,45-5110-67,10-6888-99,9-2420-85,6-8678-93,77-9413-14,13-3565-80,57-7947-98,46-4865-93,64-9236-79,37-7838-38,37-9325-83,24-838-91,90-9115-85,15-8472-87,42-7213-83,11-8412-92,11-414-86,74-8479-92,82-9337-89,88-8812-83,82-8264-83,63-8210-12,11-765-70,5-6924-66,23-6651-63,27-636-84,5-8468-85,77-8645-69,69-9228-90,17-9130-45,30-4639-40,40-8639-74,74-7529-98,14-284-40,1-4015-90,15-976-19,5-422-72,1-7327-81,81-824-91,3-9033-95,33-9624-90,23-2388-88,15-8977-78,70-7828-80,11-2736-91,35-9398-99,3-9813-70,63-703-73,49-7366-87,65-8612-93,13-1476-96,89-9624-72,25-7168-71,67-731-6,5-8919-88,19-965-5,5-2119-20,20-5076-97,75-977-98,18-9724-25,25-504-94,3-9466-92,65-9221-29,21-295-43,6-4319-94,19-9517-60,27-5910-75,11-7457-84,57-856-68,67-6966-66,22-6562-63,61-6317-86,17-8710-81,82-8612-90,12-8932-98,31-9983-85,10-8419-90,2-1883-85,14-8450-69,68-6825-96,25-9577-90,80-9168-90,73-8917-89,14-8845-55,46-5528-98,98-9854-78,54-5428-34,28-3469-76,70-7013-54,12-5428-46,16-4520-92,18-9264-65,11-6549-67,11-4916-17,17-9819-67,8-6619-27,9-6452-59,29-5943-78,4-7762-62,63-995-6,6-715-91,4-923-9,8-6952-53,53-5377-80,78-8026-97,97-998-61,35-6022-92,6-918-68,7-93-6,5-831-1,3-804-91,90-9218-73,72-7212-19,13-1821-73,20-7369-92,70-709-75,10-1078-80,79-8052-54,18-5395-98,30-953-91,3-913-95,2-959-81,9-913-88,14-8924-67,25-6623-97,23-9830-30,1-3120-61,57-6138-38,38-982-95,1-9611-92,10-8322-92,8-2745-97,27-9625-98,1-9910-79,62-802-25,1-9012-92,25-931-99,98-9867-90,67-6715-95,2-9616-64,16-634-18,17-897-87,45-822-3,3-9572-75,64-773-5,6-5616-96,16-9076-84,75-8327-27,28-5224-39,38-8416-97,12-9711-98,10-993-13,2-9426-40,25-4144-74,59-7366-75,53-741-96,2-961-85,1-859-12,11-6145-82,46-8214-98,7-9765-65,19-651-36,7-3520-49,19-507-99,4-620-85,21-8646-99,2-996-6,7-8989-89,62-907-93,3-9226-68,27-2730-61,29-6151-75,74-747-76,19-7512-13,12-8222-55,23-541-53,54-6320-87,20-8686-86,87-8746-72,46-4754-65,23-338-93,6-62-96,1-9687-99,86-9830-71,31-713-94,93-937-96,6-621-74,20-7510-90,11-9019-90,18-1969-69,26-7059-97,59-986-68,3-72-17,16-652-98,3-9871-95,31-7137-52,36-5272-87,73-8729-82,46-7965-77,14-787-92,6-858-35,15-367-59,1-5993-95,6-9347-93,48-485-24,1-231-81,10-8032-65,1-6664-90,65-6621-65,7-2011-85,12-8689-89,73-9062-92,91-9348-60,2-5913-44,13-2311-32,30-3317-96,18-9619-91,14-1425-54,24-547-92,9-9334-91,34-9980-89,71-8837-58,57-5727-99,5-993-89,1-434-90,91-9510-27,11-2637-58,37-5957-81,56-829-73,66-745-78,42-7830-77,26-9241-61,41-4165-74,65-748-86,7-861-94,2-9326-65,63-654-95,4-7154-71,55-589-49,11-4833-42,39-4155-69,56-6828-89,28-467-91,91-9477-98,97-9719-37,15-3794-94,90-953-63,2-9728-84,28-8518-20,19-4453-61,43-6176-98,76-7796-98,10-9733-89,17-8922-99,21-2217-28,23-289-9,10-1655-57,10-566-55,6-610-82,5-8121-22,21-4816-98,4-1541-72,42-5932-49,46-4938-87,38-952-2,2-2938-78,38-7919-25,17-2599-99,13-991-2,3-8060-93,59-9435-84,34-8444-98,44-9816-32,70-7833-39,15-3213-86,13-851-5,6-4238-48,38-3837-39,38-9894-94,10-9554-58,54-5920-68,21-6821-63,20-6473-74,8-7368-97,69-7654-89,2-903-94,4-9532-94,29-5575-75,19-757-67,8-685-44,6-4884-84,5-842-89,2-9822-45,21-459-94,8-813-87,20-8718-19,18-7018-46,17-4756-82,57-5717-77,28-7862-87,61-888-87,7-8810-90,9-914-92,4-933-94,4-9451-57,46-573-31,2-8551-55,51-5410-76,75-7620-64,49-628-99,26-993-55,2-256-77,56-8531-82,1-8171-76,70-7740-52,53-778-20,9-919-41,40-4018-64,19-4685-85,23-8615-39,8-1957-64,56-7048-81,49-8017-92,1-9329-57,35-5643-98,42-9747-90,17-9173-73,72-7220-72,44-712-95,2-9677-79,48-7717-88,18-925-80,5-61-49,50-6434-94,35-932-22,3-2312-34,11-3446-55,40-5555-61,51-602-70,3-698-94,2-1343-60,47-6019-20,19-3664-72,63-6511-45,10-4523-87,22-8710-89,9-901-1,2-9742-42,41-4212-95,11-955-95,95-982-99,3-6180-96,65-9641-94,41-4250-70,50-7136-51,50-5236-85,9-8516-24,16-2319-96,20-8589-90,15-907-99,5-9317-26,16-5992-92,60-9335-80,35-901-3,3-9178-89,78-884-29,5-2820-60,15-7955-95,56-6258-97,59-987-15,16-8815-43,16-483-96,4-9534-35,2-341-73,5-731-97,4-9763-96,62-9876-78,77-7846-46,27-4711-11,12-5015-86,90-9054-74,53-745-93,5-514-85,15-8536-92,91-9150-74,51-6251-51,17-5210-79,1-8074-92,18-9117-24,23-5133-61,9-626-97,2-9872-96,95-9743-80,33-8017-34,16-3560-83,59-8349-65,48-6570-71,18-7110-87,66-8619-69,20-6924-59,25-5811-36,12-3547-99,48-9914-96,96-9722-96,22-8568-68,17-695-71,4-7023-48,22-4988-90,3-8829-55,37-5641-93,40-9291-91,37-922-96,3-2140-76,75-752-8,8-968-96,99-9952-83,82-8215-92,80-8610-87,6-8715-29,14-3013-86,8-859-95,41-442-44,3-448-91,70-8728-66,28-672-86,1-33-93,2-9411-18,8-1912-69,13-704-13,8-1286-98,2-8675-91,62-7968-84,67-833-94,2-9480-98,80-9854-89,54-5569-97,35-8839-99,38-899-91,10-9216-17,16-867-11,7-87-57,7-82-41,2-3918-63,17-6481-85,83-8597-97,69-981-4,4-6190-93,58-9334-73,33-737-87,86-8819-95,18-964-5,5-7735-35,35-5443-43,42-825-99,3-614-29,15-6582-86,2-838-20,9-152-97,3-9769-88,70-8838-38,37-9217-42,17-4180-80,79-9424-45,24-7251-62,50-895-72,6-6156-78,16-5171-84,70-712-78,13-6863-92,12-7340-90,37-7947-93,49-9321-72,3-7396-97,3-977-74,50-7558-87,86-8788-90,4-8916-16,17-294-97,10-9722-92,22-9188-89,11-8937-87,37-9475-75,15-7620-77,76-7632-80,33-7517-68,18-6993-98,4-9319-20,19-7941-60,42-6192-93,2-936-99,7-9952-94,53-9461-91,40-9276-76,15-7717-71,16-7823-35,35-481-23,22-9911-50,4-805-95,95-9698-98,1-9913-72,71-7135-94,34-341-98,1-979-69,17-6922-55,21-5542-85,26-4114-81,21-8224-53,40-5376-80,59-7716-22,17-235-38,5-618-20,18-193-62,61-638-63,4-6321-39,22-4043-91,90-9235-51,50-5114-82,34-8234-58,57-5720-68,21-6816-16,15-7238-40,37-4146-51,9-484-96,4-9730-83,30-413-9,9-1072-73,39-726-95,94-9458-71,57-7211-86,10-559-79,10-7812-92,5-9310-85,68-8511-95,10-1211-37,36-5628-87,87-9721-96,20-2071-80,18-8123-24,2-237-9,9-3837-55,3-5572-86,54-8748-94,11-9468-92,69-8751-53,50-5339-88,40-873-12,1-135-82,2-825-67,1-6894-94,16-9531-31,32-969-99,10-9962-64,2-6311-98,11-9715-36,27-3539-41,39-4011-16,11-1514-16,15-5314-90,14-9120-81,20-8259-91,39-9039-83,38-8376-78,43-7769-91,15-6967-85,37-8420-63,52-6338-68,37-3833-34,33-9237-66,66-833-99,2-9977-79,74-7945-76,46-7559-95,40-5310-65,64-6641-92,42-566-77,6-772-91,2-316-75,16-8364-93,63-9213-91,8-9012-63,13-1398-99,4-9960-81,29-6131-96,96-9689-90,5-9034-39,37-4073-88,74-8937-59,46-5923-85,24-848-31,6-3216-55,15-1637-37,10-7739-85,84-862-80,2-8211-66,5-1234-48,33-358-88,1-7339-91,40-9269-93,68-9518-49,18-7789-91,90-9198-98,18-9814-93,15-9211-12,11-4625-81,26-8027-95,26-2714-75,74-7653-80,53-8143-95,43-9627-89,84-9013-96,14-8912-13,13-4745-81,44-4995-97,5-9631-31,32-9474-84,39-857-93,8-9230-61,62-9722-72,22-6958-74,59-751-3,2-614-17,11-1652-52,51-5331-93,4-9223-85,84-8517-98,16-978-32,9-487-90,89-9012-98,12-8762-88,61-6134-89,31-8813-15,14-989-37,38-7823-43,22-447-30,30-3143-43,42-842-98,1-9815-84,14-8545-84,84-8414-14,15-422-92,2-9190-91,23-9035-56,34-342-91,4-9034-97,8-979-75,9-753-17,18-9855-91,55-9254-95,55-9942-43,43-7434-42,33-4213-79,79-7915-85,16-8525-30,29-2919-21,20-2137-72,36-4827-52,1-5327-34,33-331-72,4-7228-67,66-6661-64,64-9142-75,68-7496-97,23-963-29,4-1313-90,56-907-89,8-8921-23,22-4795-96,57-9659-59,20-594-5,4-9031-86,30-8513-91,14-9162-70,34-3666-67,12-674-5,5-3310-54,9-5573-82,50-7359-68,60-6836-63,35-4730-87,31-8618-50,6-5118-64,17-6487-88,14-8866-66,35-7527-59,5-286-53,1-5212-84,13-8336-74,53-759-90,13-9094-96,62-9544-58,44-8626-81,82-921-38,18-3981-81,39-809-44,8-4515-84,12-156-14,5-7615-88,15-8759-95,59-9278-98,28-7866-77,65-7649-63,19-641-83,22-6419-91,20-9214-80,13-8014-56,43-5529-68,36-6946-72,47-7314-28,6-2739-54,39-4037-72,37-3896-98,11-9777-96,96-9747-64,60-911-94,3-9381-98,56-9875-88,88-8840-94,93-9319-97,19-9918-18,19-9749-96,48-955-93,92-9317-18,17-8477-77,23-7725-27,6-276-98,98-9817-67,17-664-34,4-5040-41,40-9938-96,38-9523-44,23-4438-59,58-5888-89,88-8840-46,39-8366-76,23-7615-64,16-656-36,36-3717-53,17-5241-79,42-781-71,70-715-87,45-8725-29,7-299-16,10-2669-85,67-8625-57,8-572-56,3-5557-76,58-937-7,6-9426-93,27-943-89,34-8852-70,51-657-73,59-7266-99,47-6516-45,26-4572-79,71-7879-79,20-8023-90,22-9171-96,70-9668-88,11-7231-76,86-8713-93,12-9420-98,20-986-91,9-907-92,20-8611-90,11-628-89,9-8831-98,32-9419-19,18-7331-70,1-712-81,33-8211-65,76-8311-89,90-9781-82,39-821-96,3-959-98,8-9822-25,23-2516-73,14-725-79,44-8095-95,10-961-90,1-9713-73,13-7295-96,23-964-46,37-4719-34,19-9950-91,19-905-72,13-6816-71,15-728-95,89-944-97,1-9845-89,44-9035-36,35-9728-79,16-7888-93,88-9218-85,89-9220-91,19-926-49,12-4812-46,5-5136-98,75-976-21,4-215-83,60-8440-95,39-9696-97,17-9721-94,21-7219-90,10-209-21,22-654-55,4-548-86,85-853-82,3-8136-54,37-5315-87,14-147-53,8-5296-96,13-973-72,71-711-79,5-7823-55,16-6015-41,41-7664-69,64-973-99,3-993-93,2-9316-94,17-9410-94,9-9426-96,15-9616-52,19-5212-91,12-9252-95,51-992-48,2-319-59,13-586-90,7-773-95,74-997-74,74-7421-44,33-4541-89,40-4294-96,80-9577-86,82-8553-93,58-925-98,97-979-71,9-726-84,6-8490-94,73-841-98,2-920-88,52-879-89,9-9612-84,11-112-29,1-22-98,1-9944-45,31-447-77,8-983-4,3-62-20,4-2136-63,62-621-98,8-9943-82,81-8118-30,17-2949-94,14-4928-60,1-592-98,3-9822-38,37-392-79,78-9525-30,24-311-82,4-824-84,4-838-96,8-827-67,27-689-27,17-278-70,69-6919-20,20-8813-79,47-792-67,3-688-60,36-6029-33,32-349-94,8-915-28,15-281-2,2-5343-47,8-5526-82,25-2610-97,96-9628-33,27-3977-81,76-8228-78,67-7914-80,48-7976-77,59-7611-11,10-898-30,5-1711-75,12-7513-90,55-9114-15,14-3994-96,23-9520-84,20-8928-95,29-943-55,1-543-98,3-9744-89,43-8958-96,57-7426-85,26-2652-53,52-912-95,6-963-87,87-979-25,7-268-76,14-7514-38,7-4366-67,66-8049-98,48-5077-96,77-9729-89,27-2842-92,42-919-71,8-840-40,1-3926-27,26-8977-78,17-7720-33,31-3464-65,23-6531-62,32-6061-81,61-8057-87,87-87'	! !!BlockClosure methodsFor: '*AdventOfCode2022' stamp: 'BSTJ 12/1/2022 18:19'!split: aSequenceableCollection indicesDo: aBlock	"Perform an action specified as aBlock (with a start and end argument) to each of the indices of aSequenceableCollection that have been identified by taking the receiver as a splitter." 		"(String streamContents: [:s | [:c | c isSeparator ] split:  'Pharo is cool'  indicesDo: [ :start :end | s << 's:' << start asString << ' ' << 'e:' << end asString << ' ' ]]) >>>  's:1 e:5 s:7 e:8 s:10 e:13 '"			| position |		position := 1.		aSequenceableCollection withIndexDo: [:element :idx |		(self value: element) 			ifTrue: [				aBlock value: position value: idx - 1.				position := idx + 1 ]].			aBlock value: position value: aSequenceableCollection size! !!Elf methodsFor: 'adding-food' stamp: 'BSTJ 12/1/2022 15:27'!addAllFood: aCollectionOfFoodItems	aCollectionOfFoodItems do: [:each | self addFood: each]! !!Elf methodsFor: 'adding-food' stamp: 'BSTJ 12/1/2022 00:13'!addFood: aFoodItem	foodItems add: aFoodItem! !!Elf methodsFor: 'accessing-derived' stamp: 'BSTJ 12/1/2022 00:15'!totalFoodCalories	^foodItems inject: 0 into: [:total :food | total + food calories ]! !!Elf methodsFor: 'printing' stamp: 'BSTJ 12/1/2022 00:32'!printOn: aStream	super printOn: aStream.	aStream nextPutAll: ' (food items: ', foodItems size printString, ' calories: ', self totalFoodCalories printString, ' )' ! !!Elf methodsFor: 'initialize-release' stamp: 'BSTJ 12/1/2022 00:12'!initialize	foodItems := OrderedCollection new.! !!FoodItem methodsFor: 'accessing' stamp: 'BSTJ 12/1/2022 00:09'!calories	^ calories! !!FoodItem methodsFor: 'accessing' stamp: 'BSTJ 12/1/2022 00:09'!calories: anObject	calories := anObject! !!FoodItem class methodsFor: 'instance creation' stamp: 'BSTJ 12/1/2022 00:11'!calories: anInteger	^super basicNew calories: anInteger! !!FoodItem class methodsFor: 'instance creation' stamp: 'BSTJ 12/1/2022 15:17'!fromString: aString	^self calories: aString asInteger! !!HandShape methodsFor: 'accessing-derived' stamp: 'BSTJ 12/2/2022 02:07'!drawingShape	"Answer the shape that is DRAWING against the receiver"		self isRock ifTrue: [^RockShape new].	self isPaper ifTrue: [^PaperShape new].	self isScissors ifTrue: [^ScissorsShape new].	^self error: 'Should not get here!!'! !!HandShape methodsFor: 'accessing-derived' stamp: 'BSTJ 12/2/2022 02:07'!losingShape	"Answer the shape that is LOSING against the receiver"	self isRock ifTrue: [^ScissorsShape new].	self isPaper ifTrue: [^RockShape new].	self isScissors ifTrue: [^PaperShape new].	^self error: 'Should not get here!!'! !!HandShape methodsFor: 'accessing-derived' stamp: 'BSTJ 12/2/2022 02:26'!winningShape	"Answer the shape that is WINNING against the receiver"	self isRock ifTrue: [^PaperShape new].	self isPaper ifTrue: [^ScissorsShape new].	self isScissors ifTrue: [^RockShape new].	^self error: 'Should not get here!!'! !!HandShape methodsFor: 'testing-results' stamp: 'BSTJ 12/2/2022 03:14'!drawsAgainst: anotherShape	self subclassResponsibility.! !!HandShape methodsFor: 'testing-results' stamp: 'BSTJ 12/2/2022 02:09'!losesAgainst: anotherShape	^anotherShape winsAgainst: self! !!HandShape methodsFor: 'testing-results' stamp: 'BSTJ 12/2/2022 02:34'!winsAgainst: anotherShape	self subclassResponsibility.! !!HandShape methodsFor: 'testing' stamp: 'BSTJ 12/2/2022 00:13'!isPaper	^false! !!HandShape methodsFor: 'testing' stamp: 'BSTJ 12/2/2022 00:13'!isRock	^false! !!HandShape methodsFor: 'testing' stamp: 'BSTJ 12/2/2022 00:14'!isScissors	^false! !!HandShape class methodsFor: 'instance creation' stamp: 'BSTJ 12/2/2022 01:28'!fromString: aString	aString = 'A' ifTrue: [^RockShape new].	aString = 'B' ifTrue: [^PaperShape new].	aString = 'C' ifTrue: [^ScissorsShape new].		aString = 'X' ifTrue: [^RockShape new].	aString = 'Y' ifTrue: [^PaperShape new].	aString = 'Z' ifTrue: [^ScissorsShape new].		self error: 'Should not get here!! '! !!PaperShape methodsFor: 'testing-results' stamp: 'BSTJ 12/2/2022 03:13'!drawsAgainst: anotherShape	^anotherShape isPaper! !!PaperShape methodsFor: 'testing-results' stamp: 'BSTJ 12/2/2022 02:33'!winsAgainst: anotherShape	^anotherShape isRock! !!PaperShape methodsFor: 'testing' stamp: 'BSTJ 12/2/2022 00:14'!isPaper	^true! !!PaperShape methodsFor: 'accessing-derived' stamp: 'BSTJ 12/2/2022 00:06'!score	^2! !!RPSRound methodsFor: 'scoring' stamp: 'BSTJ 12/2/2022 02:27'!resultScore	(playerShape winsAgainst: opponentShape) ifTrue: [^6].	(playerShape drawsAgainst: opponentShape) ifTrue: [^3].	(playerShape losesAgainst: opponentShape) ifTrue: [^0].			self error: 'Should not get here!!'! !!RPSRound methodsFor: 'scoring' stamp: 'BSTJ 12/2/2022 00:30'!score	^playerShape score + self resultScore! !!RPSRound methodsFor: 'accessing' stamp: 'BSTJ 12/2/2022 00:20'!opponentShape	^ opponentShape! !!RPSRound methodsFor: 'accessing' stamp: 'BSTJ 12/2/2022 00:20'!opponentShape: anObject	opponentShape := anObject! !!RPSRound methodsFor: 'accessing' stamp: 'BSTJ 12/2/2022 00:20'!playerShape	^ playerShape! !!RPSRound methodsFor: 'accessing' stamp: 'BSTJ 12/2/2022 00:20'!playerShape: anObject	playerShape := anObject! !!RPSRound class methodsFor: 'private' stamp: 'BSTJ 12/2/2022 02:26'!desiredResultFromString: aString for: opponentShape	"Loss"	aString = 'X' ifTrue: [ ^opponentShape losingShape ].	"Draw"	aString = 'Y' ifTrue: [ ^opponentShape drawingShape ].		"Win"	aString = 'Z' ifTrue: [ ^opponentShape winningShape ].		self error: 'Should not get here!! '! !!RPSRound class methodsFor: 'instance creation' stamp: 'BSTJ 12/2/2022 11:55'!fromStrategyString: aString	"Used to solve part 02 of day 02"	| shapes newInstance opponentShape playerShape |		newInstance := self new.	shapes := aString substrings.		opponentShape := HandShape fromString: shapes first.	newInstance opponentShape: opponentShape.		playerShape := self desiredResultFromString: shapes second for: opponentShape.	newInstance playerShape: playerShape.		^newInstance	! !!RPSRound class methodsFor: 'instance creation' stamp: 'BSTJ 12/2/2022 11:54'!fromString: aString	"Used to solve part 01 of day 02"	| shapes newInstance |		newInstance := self new.	shapes := aString substrings.	newInstance opponentShape: (HandShape fromString: shapes first).	newInstance playerShape: (HandShape fromString: shapes second).	^newInstance	! !!RockShape methodsFor: 'testing-results' stamp: 'BSTJ 12/2/2022 03:14'!drawsAgainst: anotherShape	^anotherShape isRock! !!RockShape methodsFor: 'testing-results' stamp: 'BSTJ 12/2/2022 02:33'!winsAgainst: anotherShape	^anotherShape isScissors! !!RockShape methodsFor: 'testing' stamp: 'BSTJ 12/2/2022 00:14'!isRock	^true! !!RockShape methodsFor: 'accessing-derived' stamp: 'BSTJ 12/2/2022 00:06'!score	^1! !!Rucksack methodsFor: 'accessing-derived' stamp: 'BSTJ 12/3/2022 01:45'!allItems	^(compartments at: 1), (compartments at: 2)! !!Rucksack methodsFor: 'initialize-release' stamp: 'BSTJ 12/3/2022 00:23'!initialize	compartments := Dictionary new.! !!Rucksack methodsFor: 'adding' stamp: 'BSTJ 12/3/2022 00:25'!addItem: anObject toCompartment: anInteger	(compartments at: anInteger ifAbsentPut: [OrderedCollection new]) add: anObject! !!Rucksack methodsFor: 'adding' stamp: 'BSTJ 12/3/2022 00:51'!commonItemsBetweenCompartment: firstCompNumber and: secondCompNumber	| common first second  |		common := OrderedCollection new.	first := (compartments at: firstCompNumber).	second := (compartments at: secondCompNumber).	first do: [:each | ((second includes: each) and: [(common includes: each) not]) ifTrue: [common add: each]].	^common! !!Rucksack methodsFor: 'adding' stamp: 'BSTJ 12/3/2022 03:51'!commonItemsWith: anotherRucksack	| common first second  |		"USE #allItems"		common := OrderedCollection new.	first := (compartments at: 1), (compartments at: 2).	second := (anotherRucksack compartments at: 1), (anotherRucksack compartments at: 2).	first do: [:each | ((second includes: each) and: [(common includes: each) not]) ifTrue: [common add: each]].	^common! !!Rucksack methodsFor: 'accessing' stamp: 'BSTJ 12/3/2022 00:08'!compartments	^ compartments! !!Rucksack methodsFor: 'accessing' stamp: 'BSTJ 12/3/2022 00:08'!compartments: anObject	compartments := anObject! !!Rucksack class methodsFor: 'as yet unclassified' stamp: 'BSTJ 12/3/2022 00:22'!fromString: aString	| splitIndex firstCompartmentItems secondCompartmentItems rucksack |		rucksack := self new.		splitIndex := aString size // 2.	firstCompartmentItems := aString copyFrom: 1 to: splitIndex.	secondCompartmentItems := aString copyFrom: (splitIndex + 1) to: aString size.	firstCompartmentItems do: [:char |  rucksack addItem: (RucksackItem fromCharacter: char) toCompartment: 1].	secondCompartmentItems do: [:char |  rucksack addItem: (RucksackItem fromCharacter: char) toCompartment: 2].	^rucksack ! !!RucksackItem methodsFor: 'comparing' stamp: 'BSTJ 12/3/2022 00:32'!= anObject	self class == anObject class ifFalse: [^false].	^self type == anObject type! !!RucksackItem methodsFor: 'comparing' stamp: 'BSTJ 12/3/2022 00:32'!hash	^type hash! !!RucksackItem methodsFor: 'printing' stamp: 'BSTJ 12/3/2022 00:27'!printOn: aStream	super printOn: aStream.	aStream		nextPutAll: '(type=' ;		nextPut: type ;		nextPutAll: ')'.! !!RucksackItem methodsFor: 'accessing-derived' stamp: 'BSTJ 12/3/2022 00:16'!priority	type isLowercase ifTrue: [^Character alphabet indexOf: type].	type isUppercase ifTrue: [^(Character alphabet asUppercase indexOf: type) + 26].		self error: 'Should not get here!!'	! !!RucksackItem methodsFor: 'accessing' stamp: 'BSTJ 12/3/2022 00:08'!type	^ type! !!RucksackItem methodsFor: 'accessing' stamp: 'BSTJ 12/3/2022 00:08'!type: anObject	type := anObject! !!RucksackItem class methodsFor: 'as yet unclassified' stamp: 'BSTJ 12/3/2022 00:09'!fromCharacter: aCharacter	^self new type: aCharacter! !!ScissorsShape methodsFor: 'testing-results' stamp: 'BSTJ 12/2/2022 03:14'!drawsAgainst: anotherShape	^anotherShape isScissors! !!ScissorsShape methodsFor: 'testing-results' stamp: 'BSTJ 12/2/2022 02:33'!winsAgainst: anotherShape	^anotherShape isPaper! !!ScissorsShape methodsFor: 'testing' stamp: 'BSTJ 12/2/2022 00:14'!isScissors	^true! !!ScissorsShape methodsFor: 'accessing-derived' stamp: 'BSTJ 12/2/2022 00:06'!score	^3! !!SectionAssignment methodsFor: 'printing' stamp: 'BSTJ 12/4/2022 00:22'!printOn: aStream	super printOn: aStream.	aStream 		nextPutAll: '( ', start printString;		nextPutAll: ' - ' ;		nextPutAll: end printString, ' )'.	! !!SectionAssignment methodsFor: 'testing' stamp: 'BSTJ 12/4/2022 00:14'!isFullyContainedIn: anotherSectionAssignment	(self start >= anotherSectionAssignment start) ifFalse: [^false].	(self end <= anotherSectionAssignment end) ifFalse: [^false].		^true	! !!SectionAssignment methodsFor: 'testing' stamp: 'BSTJ 12/4/2022 00:37'!numberOfOverlapsWith: anotherSectionAssignment	| a1 a2 |	a1 := (Interval from: start to: end by: 1) asOrderedCollection.	a2 := (Interval from: anotherSectionAssignment start to: anotherSectionAssignment end by: 1) asOrderedCollection.	^(a1 intersection: a2) size		! !!SectionAssignment methodsFor: 'accessing' stamp: 'BSTJ 12/4/2022 00:06'!end	^ end! !!SectionAssignment methodsFor: 'accessing' stamp: 'BSTJ 12/4/2022 00:06'!end: anObject	end := anObject! !!SectionAssignment methodsFor: 'accessing' stamp: 'BSTJ 12/4/2022 00:06'!start	^ start! !!SectionAssignment methodsFor: 'accessing' stamp: 'BSTJ 12/4/2022 00:06'!start: anObject	start := anObject! !!SectionAssignment class methodsFor: 'as yet unclassified' stamp: 'BSTJ 12/4/2022 00:10'!fromString: aString	| delimitations |		delimitations := aString subStrings: #( $-).	^self new		start: (delimitations first asInteger);		end: (delimitations second asInteger).! !!SequenceableCollection methodsFor: '*AdventOfCode2022' stamp: 'BSTJ 12/1/2022 18:19'!split: aSequenceableCollection indicesDo: aBlock	"Perform an action specified as aBlock (with a start and end argument) to each of the indices of aSequenceableCollection that have been identified by taking the receiver as a splitter."	"('||' split: 'foo||bar||2')>>>#('foo' 'bar' '2') asOrderedCollection"	"(String streamContents: [:s | '||' split: 'foo||bar||2' indicesDo: [ :start :end | s << 's:' << start asString << ' ' << 'e:' << end asString << ' ' ]]) >>> 's:1 e:3 s:6 e:8 s:11 e:11 '"		| position oldPosition |	position := 1.	oldPosition := position.	position := aSequenceableCollection indexOfSubCollection: self startingAt: position.		[ position > 0 ] whileTrue: [		aBlock value: oldPosition value: position - 1.		position := position + self size.		oldPosition := position.		position := aSequenceableCollection indexOfSubCollection: self startingAt: position.	].	aBlock value: oldPosition value: aSequenceableCollection size.! !!SequenceableCollection methodsFor: '*AdventOfCode2022' stamp: 'BSTJ 12/1/2022 18:16'!splitOn: splitter	"Split a collection of objects based on a splitter. splitter - can be a subsequence, a Block or a Regex (String receiver only). Any other object used as a splitter is treated as an Array containing that object."	"(#(1 2 3 3 4 1 2 3 5 4 6) splitOn: 4) >>> #(#(1 2 3 3) #(1 2 3 5) #(6))asOrderedCollection"	"(#(1 2 3 3 4 1 2 3 3 5 6) splitOn: #(3 3)) >>> #(#(1 2) #(4 1 2) #(5 6)) asOrderedCollection"	"(#(2 2 3 3 4 1 2 3 3 5) splitOn: [:each | each > 3])>>> #(#(2 2 3 3) #(1 2 3 3) #()) asOrderedCollection"	^ splitter split: self! !!String methodsFor: '*AdventOfCode2022' stamp: 'BSTJ 12/1/2022 18:25'!linesGroupedByParagraph	^(self lines splitOn: [:each | each isEmpty]) 		reject: [:each | each isEmpty]	! !String removeSelector: #blankLinesSubstrings!String removeSelector: #groupLinesSeparatedBy:!String removeSelector: #linesGroupedByOfParagraph!String removeSelector: #linesOfParagraphs!String removeSelector: #linesSeparatedByBlankLines!String removeSelector: #paragraphedLines!String removeSelector: #paragraphsLines!ScissorsShape removeSelector: #winningShape!RucksackItem removeSelector: #isSameTypeAs:!RucksackItem removeSelector: #priority:!!RucksackItem reorganize!('comparing' = hash)('printing' printOn:)('accessing-derived' priority)('accessing' type type:)!!Rucksack reorganize!('accessing-derived' allItems)('initialize-release' initialize)('adding' addItem:toCompartment: commonItemsBetweenCompartment:and: commonItemsWith:)('accessing' compartments compartments:)!RockShape removeSelector: #winningShape!RPSRound class removeSelector: #desiredResultFromString:!RPSRound class removeSelector: #fromResultString:!RPSRound class removeSelector: #fromStringNew:!!RPSRound class reorganize!('private' desiredResultFromString:for:)('instance creation' fromStrategyString: fromString:)!!RPSRound reorganize!('scoring' resultScore score)('accessing' opponentShape opponentShape: playerShape playerShape:)!PaperShape class removeSelector: #winningShape!PaperShape removeSelector: #winningShape!HandShape class removeSelector: #winningShapeFromString:!!HandShape reorganize!('accessing-derived' drawingShape losingShape winningShape)('testing-results' drawsAgainst: losesAgainst: winsAgainst:)('testing' isPaper isRock isScissors)!FoodItem removeSelector: #initialize!AoC2022Test removeSelector: #day02Puzzle02Data!AoC2022Test removeSelector: #readDay01From:!AoC2022Test removeSelector: #readDay02DataNewFrom:!AoC2022Test removeSelector: #solveDay01Example01With:!AoC2022Test removeSelector: #solveDay01Puzzle01With:!AoC2022Test removeSelector: #testSequenceableCollection!AoC2022Test removeSelector: #testStringLinesGroupedByParagraph!!AoC2022Test reorganize!('reading' readDay01DataFrom: readDay02DataFrom: readDay02Part02DataFrom: readDay03DataFrom: readDay03Part2DataFrom: readDay04DataFrom:)('tests-extensions' testSequenceableCollectionExtensions testStringExtensions)('tests-AoC' testDay01 testDay02 testDay03 testDay04)('solving' solveDay01Part01With: solveDay01Part02With: solveDay02Part01With: solveDay02Part02With: solveDay03Part01With: solveDay03Part02With: solveDay04Part01With: solveDay04Part02With:)('input data' day01Example01Data day01Puzzle01Data day02Example01Data day02Puzzle01Data day03Example01Data day03Puzzle01Data day04Example01Data day04Puzzle01Data)!